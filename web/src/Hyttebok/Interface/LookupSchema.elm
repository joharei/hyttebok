-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hyttebok.Interface.LookupSchema exposing (Fragments, directives, fragments, maybeFragments, mutationType, queryType, subscriptionType, types)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Hyttebok.InputObject
import Hyttebok.Interface
import Hyttebok.Object
import Hyttebok.Scalar
import Hyttebok.ScalarCodecs
import Hyttebok.Union
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onSchemaProxy : SelectionSet decodesTo Hyttebok.Object.SchemaProxy
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Hyttebok.Interface.LookupSchema
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "SchemaProxy" selections.onSchemaProxy
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onSchemaProxy = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


directives : SelectionSet decodesTo Hyttebok.Object.Directive__ -> SelectionSet (List decodesTo) Hyttebok.Interface.LookupSchema
directives object_ =
    Object.selectionForCompositeField "directives" [] object_ (identity >> Decode.list)


mutationType : SelectionSet decodesTo Hyttebok.Object.Type__ -> SelectionSet (Maybe decodesTo) Hyttebok.Interface.LookupSchema
mutationType object_ =
    Object.selectionForCompositeField "mutationType" [] object_ (identity >> Decode.nullable)


queryType : SelectionSet decodesTo Hyttebok.Object.Type__ -> SelectionSet decodesTo Hyttebok.Interface.LookupSchema
queryType object_ =
    Object.selectionForCompositeField "queryType" [] object_ identity


subscriptionType : SelectionSet decodesTo Hyttebok.Object.Type__ -> SelectionSet (Maybe decodesTo) Hyttebok.Interface.LookupSchema
subscriptionType object_ =
    Object.selectionForCompositeField "subscriptionType" [] object_ (identity >> Decode.nullable)


types : SelectionSet decodesTo Hyttebok.Object.Type__ -> SelectionSet (List decodesTo) Hyttebok.Interface.LookupSchema
types object_ =
    Object.selectionForCompositeField "types" [] object_ (identity >> Decode.list)
